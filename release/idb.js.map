{"version":3,"sources":["env.coffee","DeferAndPromise.coffee","indexedDB.coffee","IDBTransaction.coffee","IDBKeyRange.coffee","IDBRequest2Q.coffee","IDBTx2Q.coffee","IDBError.coffee","Schema.coffee","Query.coffee","Store.coffee","Database.coffee","DatabaseManager.coffee","export.coffee"],"names":[],"mappings":"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","file":"idb.js","sourceRoot":"/source/","sourcesContent":["#abstract root level object as environment(env)\nenv = window or self or global or @","###\nThis code will constructs 3 Promise-related functions:\n\n1. newDefer()\n   this function will return a new deferred object.\n   A defferred object contains 2 functions:\n   i.  resolve(result)\n       return result value through calling this function.\n   ii. reject(error)\n       return any error through calling this function.\n\n2. toPromise(deferred)\n   this function will return the promise object of given deferred object.\n   A promise object contains 2 functions:\n   i.  then(onSuccess, onError = null)\n       set the result handler and, optionally, the error handler of the deferred object.\n   ii. catch(onError)\n       set the error handler of the deferred object.\n\n3. newPromise(result = null, error = null)\n   A shortcut function of using both newDefer() and toPromise().\n   It return a promise object that immediately resolve with given result\n   or reject with given error. Thus, either result or error must be given.\n\n###\n\n\n\n\n#ES6\nif typeof env.Promise isnt \"undefined\"\n\tnewDefer = ()->\n\t\tpromiseObj = {}\n\t\tpromiseObj.promise =\n\t\tnew Promise (promiseResolve, promiseReject)->\n\t\t\tpromiseObj.resolve = promiseResolve\n\t\t\tpromiseObj.reject = promiseReject\n\t\tpromiseObj\n\t\t\t\n\ttoPromise = (deferred)-> deferred.promise\n\t\n\t\n#Q.js\nelse if typeof env.Q isnt \"undefined\"\n\tnewDefer = ()-> Q.defer()\n\ttoPromise = (deferred)-> deferred.promise\n\t\n\t\n#Jquery\nelse if typeof env.jQuery isnt \"undefined\"\n\tnewDefer = ()-> jQuery.Deferred()\n\ttoPromise = (deferred)->\n\t\tdeferred.promise(catch : (fn)-> @fail(fn))\n\t\n\t\nelse\n\tthrow new IDBError \"Not compatible promise function found.\"\n\n\nnewPromise = (result, error)->\n\td = newDefer()\n\tif result\n\t\td.resolve(result)\n\telse if error\n\t\td.reject(error)\n\telse\n\t\tthrow new Error(\"either result or error must provided to newPromise().\")\n\ttoPromise(d)\n","#abstract indexedDB global property\nindexedDB = \nenv.indexedDB or \nenv.mozIndexedDB or \nenv.webkitIndexedDB or\nenv.msIndexedDB\n","#abstract IDBTransaction global property\nIDBTransaction = \nenv.IDBTransaction or \nenv.webkitIDBTransaction or \nenv.msIDBTransaction\n","#abstract IDBKeyRange global property\nIDBKeyRange = \nenv.IDBKeyRange or \nenv.webkitIDBKeyRange or \nenv.msIDBKeyRange\n","#turn IDBRequest to Promise\nIDBRequest2Q = (request)->\n\td = newDefer()\n\trequest.onsuccess = (event)-> d.resolve(event)\n\trequest.onerror = (event)-> d.reject(event)\n\ttoPromise d\n","#turn IDBTransaction to Promise\nIDBTx2Q = (tx)->\n\td = newDefer()\n\ttx.onComplete = (event)-> d.resolve(event)\n\ttx.onerror = tx.onabort = (event)-> d.reject(event)\n\ttoPromise d\n","class IDBError extends Error\n\tconstructor: (@message)->\n\t\tconsole.error \"IDBError: #{@message}\"","class Schema\n\t\n\t\n\t#hold @Store objects in {<store name> : <@Store object>} pairs\n\tstores: {}\n\t\n\t\n\t#inner class defining object store structure\n\tclass @Store\n\t\t\n\t\t#param (String) name: the store name\n\t\tconstructor: (@name)->\n\t\t\t#store option\n\t\t\t@option =\n\t\t\t\tkeyPath: null        #store's key path\n\t\t\t\tautoIncrement: null  #if store's key is auto increased\n\t\t\t\n\t\t\t#indexes of the store\n\t\t\t@indexes = {}\n\t\t\n\t\t\n\t\taddIndex: (name, key, isUnique, isMultiEntry)->\n\t\t\tif @indexes.hasOwnProperty name\n\t\t\t\tthrow new IDBError \"index(#{name}) duplicated at ObjectStore(#{@name}).\"\n\t\t\telse\n\t\t\t\t@indexes[name] =\n\t\t\t\t\tname: name\n\t\t\t\t\tkey: key\n\t\t\t\t\toption:\n\t\t\t\t\t\tunique: isUnique\n\t\t\t\t\t\tmultiEntry: isMultiEntry\n\t\t\t\treturn\n\t\t\n\t#end of class @Store\n\t\n\t\n\t#param (Object) dbDefinition\n\tconstructor: (dbDefinition)->\n\t\t\n\t\tif typeof dbDefinition isnt \"object\"\n\t\t\tthrow new IDBError \"The database definition must be JSON.\"\n\t\t\n\t\t#scan db definition and fill the schema\n\t\tfor storeName, storeDfn of dbDefinition\n\t\t\t\n\t\t\t#check error\n\t\t\tif typeof storeName isnt \"string\"\n\t\t\t\tthrow new IDBError \"Store name must be string.\"\n\t\t\t\tbreak\n\t\t\t\n\t\t\t#check error\n\t\t\telse if typeof storeDfn isnt \"object\" or storeDfn not instanceof Array\n\t\t\t\tthrow new IDBError \"The definition of store(#{storeName}) must be in array.\"\n\t\t\t\tbreak\n\t\t\t\t\n\t\t\telse\n\t\t\t\t\n\t\t\t\tstore = new @constructor.Store(storeName)\n\t\t\t\t\n\t\t\t\t#scan store's indexes\n\t\t\t\tfor dfn in storeDfn\n\t\t\t\t\t\n\t\t\t\t\t#check error\n\t\t\t\t\tif typeof dfn isnt \"string\"\n\t\t\t\t\t\tthrow new IDBError \"Index definition must be in string form.\"\n\t\t\t\t\t\tbreak\n\t\t\t\t\t\n\t\t\t\t\t#convert index definition into store object\n\t\t\t\t\telse\n\t\t\t\t\t\t\n\t\t\t\t\t\t#remove unnecessary spaces inside the definition\n\t\t\t\t\t\tdfn = dfn\n\t\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t\t.replace /(\\s|\\t)+/g  , \" \"\n\t\t\t\t\t\t\t.replace /\\s?\\(\\s?/g  , \"(\"\n\t\t\t\t\t\t\t.replace /\\s?\\)\\s?/g  , \")\"\n\t\t\t\t\t\t\t.replace /\\s?,\\s?/g   , \",\"\n\t\t\t\t\t\t\t.replace /\\s?\\+\\s?/g  , \"+\"\n\t\t\t\t\t\t\t.replace /\\s?\\.\\s?/g  , \".\"\n\t\t\t\t\t\t\n\t\t\t\t\t\tif dfn.match /^KEY/\n\t\t\t\t\t\t\tif store.option.keyPath?\n\t\t\t\t\t\t\t\tthrow new IDBError(\"Store key duplicated.\")\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif dfn.match /^KEY\\(.+\\)/\n\t\t\t\t\t\t\t\tstore.option.keyPath = string2KeyPath dfn[4...dfn.indexOf \")\"]\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif dfn.match /AUTO$/\n\t\t\t\t\t\t\t\tstore.option.autoIncrement = true\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tindexName = dfn.replace(/\\(.+\\)/, \"\").replace(/( UNIQUE)$/, \"\")\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif not indexName.match(/(\\w|\\.)+/)\n\t\t\t\t\t\t\t\tthrow new IDBError \"Invalid index name(#{indexName}).\"\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tisUnique = if dfn.match /( UNIQUE)$/ then true else false\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tisMultiEntry = false  #default\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tkeyPath =\n\t\t\t\t\t\t\t\tif dfn.match /^.+\\(.+\\)/\n\t\t\t\t\t\t\t\t\tisMultiEntry = true if dfn.indexOf(\",\") > -1\n\t\t\t\t\t\t\t\t\tif isMultiEntry and dfn.indexOf(\"+\") > -1\n\t\t\t\t\t\t\t\t\t\tthrow new IDBError \"Fail to parse definition(#{string}): ',' and '+' cannot state in the same definition.\"\n\t\t\t\t\t\t\t\t\tstring2KeyPath dfn[dfn.indexOf(\"(\")+1...dfn.indexOf \")\"]\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tindex2KeyPath indexName\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tstore.addIndex(indexName, keyPath, isUnique, isMultiEntry)\n\t\t\t\t\n\t\t\t\t#save store to schema\n\t\t\t\t@stores[storeName] = store\n\t\n\t\n\t#extract key path from string\n\t#examples:\n\t#  \"name.first,name.last,nick\" -> [[\"name\",\"first\"],[\"name\",\"last\"],\"nick\"]\n\t#  \"country+city+region+street\" -> [\"country\",\"city\",\"region\",\"street\"]\n\t#  \"info.email\" -> [\"info\",\"email\"]\n\tstring2KeyPath = (string)->\n\t\tif string.indexOf(\",\") > -1\n\t\t\t( string2KeyPath(keyPath) for keyPath in string.split \",\" )\n\t\telse if string.indexOf(\"+\") > -1\n\t\t\t( string2KeyPath(keyPath) for keyPath in string.split \"+\" )\n\t\telse\n\t\t\tstring = string.replace(\".\", \",\") if string.indexOf(\".\") > -1\n\t\t\t\n\t\t\tif string.match /^(\\'\\'|\\\"\\\")$/\n\t\t\t\t\"\"\n\t\t\telse if string.match /(\\'|\\\")/g\n\t\t\t\tthrow new IDBError \"Fail to parse definition(#{string}): quotation mark not in pairs.\"\n\t\t\telse\n\t\t\t\tstring\n\t\n\t\n\t#extract index name to key path\n\t#examples:\n\t#  \"address.country\" -> [\"address\",\"country\"]\n\t#  \"name\" -> \"name\"\n\tindex2KeyPath = (indexName)->\n\t\tif indexName.indexOf(\".\") > -1\n\t\t\tindexName.split(\".\")\n\t\telse\n\t\t\tindexName\n\t\n","class Query\n\t\n\t_store =         #the Store object the query belong to\n\t_indexName =     #the name of theindex to query\n\t_range = null    #the bound of the query\n\t_order = \"next\"  #the output order of the query result\n\t\n\t\n\tconstructor: (store, indexName, range)->\n\t\t_store = store\n\t\t_indexName = indexName\n\t\t_range = range\n\t\n\t\n\t#setter of query result output order\n\torder: (direction)-> \n\t\tif direction is -1 or (typeof direction is \"string\" and direction.match(/desc/))\n\t\t\t_order = \"prev\"\n\t\telse\n\t\t\t_order = \"next\"\n\t\t@\n\t\n\t\n\t#setter of result handler which iterate the result set\n\teach: (func)->\n\t\t_store.getIDBObjectStore(\"readonly\")\n\t\t.then (idbStore)->\n\t\t\td = newDefer()\n\t\t\t\n\t\t\tcursorRequest = (getIDBIndexIfSet idbStore).openCursor(_range, _order)\n\t\t\t\n\t\t\tcursorRequest.onsuccess = (event)->\n\t\t\t\t\n\t\t\t\tif cursor = event.target.result\n\t\t\t\t\ttry\n\t\t\t\t\t\tfunc(cursor.value, cursor.key)\n\t\t\t\t\t\tcursor.continue()\n\t\t\t\t\tcatch err\n\t\t\t\t\t\td.reject(err)\n\t\t\t\telse\n\t\t\t\t\td.resolve()\n\t\t\t\n\t\t\ttoPromise d\n\t\n\t#setter of result handler in which only the first reached result will pass in\n\tfirst: (func)->\n\t\t_store.getIDBObjectStore(\"readonly\")\n\t\t.then (idbStore)->\n\t\t\tIDBRequest2Q (getIDBIndexIfSet idbStore).get(_range)\n\t\t.then (event)->\n\t\t\tfunc(event.target.result)\n\t\n\t\n\t#setter of result handler in which the whole list of result will pass in\n\tlist: (func)->\n\t\tobjects = []\n\t\tkeys = []\n\t\t@each (object, key)->\n\t\t\tobjects.push object\n\t\t\tkeys.push key\n\t\t.then ->\n\t\t\tfunc(objects, keys)\n\t\n\t\n\t#setter of result handler in which the total number of result objects will pass in\n\tcount: (func)->\n\t\t_store.getIDBObjectStore(\"readonly\")\n\t\t.then (idbStore)->\n\t\t\tIDBRequest2Q (getIDBIndexIfSet idbStore).count(_range)\n\t\t.then (event)->\n\t\t\tfunc(event.target.result)\n\t\n\t\n\t#return IDBIndex if indexName given on constructing, else return back the given IDBStore object\n\tgetIDBIndexIfSet = (idbStore)->\n\t\tif _indexName then idbStore.index(_indexName) else idbStore\n","class Store\n\t\n\t_name =   #name of the store\n\t\n\t_db = null  #the Database object belong to\n\t\n\t\n\t#param (string) storeName\n\t#param (Database) db, the Database object belong to\n\tconstructor: (storeName, db)->\n\t\t_name = storeName\n\t\t_db = db\n\t\n\t\n\t#getter of IDBObjectStore object  which this object refer to\n\tgetIDBObjectStore: (mode = \"readwrite\")->\n\t\t_db.getIDBTransaction(_name, mode).then (tx)->\n\t\t\ttx.objectStore(_name)\n\t\n\t\n\t#return the key path of the store\n\tkey: -> @getIDBObjectStore(\"readonly\").then (idbStore)->idbStore.keyPath\n\t\n\t\n\t#return the name of the store\n\tname: -> @getIDBObjectStore(\"readonly\").then (idbStore)->idbStore.name\n\t\n\t\n\t#return the list of indexes found in the store\n\tindexes: -> @getIDBObjectStore(\"readonly\").then (idbStore)->idbStore.indexNames\n\t\n\t\n\t#return boolean indecating if the store key is auto increment\n\tisAutoKey: -> @getIDBObjectStore(\"readonly\").then (idbStore)->idbStore.autoIncrement\n\t\n\t\n\t#action to add a new object to store\n\tadd: (arg...)->\n\t\t@getIDBObjectStore().then (idbStore)->\n\t\t\tIDBRequest2Q( idbStore.add(arg...) )\n\t\n\t\n\t#action to update existed object from the store\n\tupdate: (arg...)->\n\t\t@getIDBObjectStore().then (idbStore)->\n\t\t\tIDBRequest2Q( idbStore.put(arg...) )\n\t\n\t\n\t#action to delete a object from the store\n\tdelete: (key)->\n\t\t@getIDBObjectStore().then (idbStore)->\n\t\t\tIDBRequest2Q( idbStore.delete(key) )\n\t\n\t\n\t#action to delete all objects found in the store\n\tclear: ->\n\t\t@getIDBObjectStore().then (idbStore)->\n\t\t\tIDBRequest2Q( idbStore.clear() )\n\t\n\t\n\t#return a new Query object that applying given expression\n\twhere: (expression)->\n\t\texpression = expression.trim() if typeof expression is \"string\"\n\t\t\n\t\t[indexName , range] = switch\n\t\t\t\n\t\t\twhen expression is null or expression is \"\"\n\t\t\t\t[null, null]\n\t\t\t\n\t\t\t# x <= index <= y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[2]) , IDBKeyRange.bound (extractStr matcher[1]), (extractStr matcher[3]) ]\n\t\t\t\n\t\t\t# x < index <= y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[2]) , IDBKeyRange.bound (extractStr matcher[1]), (extractStr matcher[3]), true ]\n\t\t\t\n\t\t\t# x <= index < y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[2]) , IDBKeyRange.bound (extractStr matcher[1]), (extractStr matcher[3]), false, true ]\n\t\t\t\n\t\t\t# x < index < y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[2]) , IDBKeyRange.bound (extractStr matcher[1]), (extractStr matcher[3]), true, true ]\n\t\t\t\n\t\t\t# x >= index >= y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[2]) , IDBKeyRange.bound (extractStr matcher[3]), (extractStr matcher[1]) ]\n\t\t\t\n\t\t\t# x > index >= y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[2]) , IDBKeyRange.bound (extractStr matcher[3]), (extractStr matcher[1]), true ]\n\t\t\t\n\t\t\t# x >= index > y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[2]) , IDBKeyRange.bound (extractStr matcher[3]), (extractStr matcher[1]), false, true ]\n\t\t\t\n\t\t\t# x > index > y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[2]) , IDBKeyRange.bound (extractStr matcher[3]), (extractStr matcher[1]), true, true ]\n\t\t\t\n\t\t\t# index <= x\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[1]) , IDBKeyRange.upperBound (extractStr matcher[2]) ]\n\t\t\t\n\t\t\t# index < x\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[1]) , IDBKeyRange.upperBound (extractStr matcher[2]), true ]\n\t\t\t\n\t\t\t# index >= x\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[1]) , IDBKeyRange.lowerBound (extractStr matcher[2]) ]\n\t\t\t\n\t\t\t# index > x\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[1]) , IDBKeyRange.lowerBound (extractStr matcher[2]), true ]\n\t\t\t\n\t\t\t# index = x\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ (extractStr matcher[1]) , IDBKeyRange.only (extractStr matcher[2]) ]\n\t\t\t\n\t\t\t#index\n\t\t\t#when matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t#\t[ (extractStr matcher[1]) , null ]\n\t\t\t\n\t\t\telse\n\t\t\t\tthrow new IDBError(\"Unknown statment (#{expression}).\")\n\t\t\n\t\tnew Query(@, (indexName), range)\n\t\n\t\n\t#a shortcut of calling @where in which no any limitation apply\n\tall: ->\n\t\t@where(null)\n\t\n\t\n\t#extract range string\n\t#examples:\n\t#  \"[a,[b,c],4]\" -> [\"a\",[\"b\",\"c\"],4]\n\t#  \"['a,b',[c,'[d,e,f]']\" -> [\"a,b\", [\"c\",\"[d,e,f]\"]\n\t#  \"'a'\" -> \"a\"\n\textractStr = (string)->\n\t\tif string.match /^\\[.*\\]$/\n\t\t\t( extractStr str.trim() for str in string[1...-1].match /(\\[.+\\]|'.*'|\".*\"|[^,]+)/g )\n\t\telse if not isNaN(string)\n\t\t\t+string\n\t\telse\n\t\t\tif string.match /^('.*'|\".*\")$/\n\t\t\t\tstring[1...-1]\n\t\t\telse\n\t\t\t\tstring\n\t\n","class Database\n\t\n\t_name =  #the database name\n\t\n\t_version =  #the database version\n\t\n\t_schema =  #the Schema object for this database\n\t\n\t_onVersionConflictHandler =  #IDBOpenDBRequest.onblocked handler\n\t\n\t_idbDatabase =  #the IDBDatabase object this object belong to\n\t\n\t_batchTx = null  #IDBTransaction object that used for batch process\n\t\n\t\n\tconstructor: (dbName)->\n\t\t_name = dbName\n\t\n\n\t#return the database name\n\tname: ()->\n\t\t@getIDBDatabase().then (idb)->\n\t\t\tidb.name\n\t\n\t\n\t#if not parameters given, return the database's version\n\t#if paramters given, define the database with given version\n\tversion: (versionNumber, dbDefination)->\n\t\tif not versionNumber\n\t\t\t@getIDBDatabase().then (idb)->\n\t\t\t\tidb.version\n\t\t\n\t\t#define the database only if the version is larger\n\t\telse if _version is null or _version <= versionNumber\n\t\t\t_schema = new Schema(dbDefination)\n\t\t\t_version = versionNumber\n\t\n\t\n\t#setter of IDBOpenDBRequest.onblocked handler\n\tonVersionConflict: (handler)->\n\t\t_onVersionConflictHandler = handler\n\t\n\t\n\t#getter of IDBDatabase object which this object refer to\n\tgetIDBDatabase: ()->\n\t\tif _idbDatabase?\n\t\t\tnewPromise _idbDatabase\n\t\telse\n\t\t\tr = indexedDB.open(_name, _version)\n\t\t\tr.onblocked = _onVersionConflictHandler\n\t\t\tr.onupgradeneeded = (event)-> doUpgrade(event.target.result)\n\t\t\tIDBRequest2Q( r ).then (event)->\n\t\t\t\t_idbDatabase = event.target.result\n\t\n\t\n\t#getter of IDBTransaction objects of this object\n\t#return _batchTx if set (by calling @batch)\n\t#or return a new IDBTransaction object\n\tgetIDBTransaction: (storeNames, mode)->\n\t\tif _batchTx\n\t\t\tnewPromise _batchTx\n\t\telse\n\t\t\t@getIDBDatabase().then (idb)->\n\t\t\t\tidb.transaction(storeNames, mode)\n\t\t\n\t\n\tstore: (storeName)->\n\t\tnew Store(storeName, @)\n\t\n\t\n\t#remove the database form disk\n\t#this object will no longer usable\n\tremove: ->\n\t\tIDBRequest2Q(indexDB.deleteDatabase(_name)).then ()->\n\t\t\t#clear\n\t\t\t_name = \n\t\t\t_version = \n\t\t\t_schema = \n\t\t\t_onVersionConflictHandler = \n\t\t\t_idbDatabase = \n\t\t\t_batchTx = null\n\t\n\t\n\t#create a transaction for upcoming actions\n\t#usage: db.batch(\"store1\", \"store2\", ...).run ()->...\n\tbatch: (storeNames...)->\n\t\t#first, clear any previous batch transaction\n\t\t_batchTx = null\n\t\t\n\t\t#function to run when _batchTx ready\n\t\tbatchFunc = null\n\t\t\n\t\t#get and set a new transaction to _batchTx\n\t\t@getIDBTransaction(storeNames, \"readonly\").then (tx)->\n\t\t\t_batchTx = tx\n\t\t\t\n\t\t\t#run if everything ready\n\t\t\tbatchFunc() if batchFunc isnt null\n\t\t\n\t\t#return a runnable for setting batch function\n\t\t{} =\n\t\t\trun: (func)=>\n\t\t\t\t#construct the batchFunc\n\t\t\t\tbatchFunc = ()=>\n\t\t\t\t\ttry\n\t\t\t\t\t\tfunc(@)\n\t\t\t\t\tfinally\n\t\t\t\t\t\t#clear after run\n\t\t\t\t\t\tbatchFunc = null  \n\t\t\t\t\t\t_batchTx = null\n\t\t\t\t\n\t\t\t\t#run if everything ready\n\t\t\t\tbatchFunc() if _batchTx isnt null\n\t\t\t\t\n\t\t\t\t#return promise of the transaction\n\t\t\t\tIDBTx2Q( _batchTx )\n\t\n\t\n\tdoUpgrade = (idb)->\n\t\t\n\t\tif _schema is null\n\t\t\tthrow new IDBError \"Schema not found.\"\n\t\t\n\t\t#list of functions that make change to the db\n\t\tactions = []\n\t\t\n\t\tcurrentStoreNames = idb.objectStoreNames\n\t\t\n\t\tif currentStoreNames.length > 0\n\t\t\ttx = idb.transaction(currentStoreNames, \"readwrite\")\n\t\t\t\n\t\t\tfor storeName in currentStoreNames\n\t\t\t\tdo (storeName)->\n\t\t\t\t\t#update existed stores\n\t\t\t\t\tif _schema.stores.hasOwnProperty storeName\n\t\t\t\t\t\tstore = tx.objectStore(storeName)\n\t\t\t\t\t\tcurrentIndexNames = store.indexNames\n\t\t\t\t\t\tstoreSchema = _schema.stores[storeName]\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor indexName in currentIndexNames\n\t\t\t\t\t\t\tdo (indexName)->\n\t\t\t\t\t\t\t\tif storeSchema.indexes.hasOwnProperty indexName\n\t\t\t\t\t\t\t\t\tindex = store.index(indexName)\n\t\t\t\t\t\t\t\t\tindexSchema = storeSchema.indexes[indexName]\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t#adding UNIQUE for existed index is not allow\n\t\t\t\t\t\t\t\t\tif not index.unique and indexSchema.option.unique\n\t\t\t\t\t\t\t\t\t\tthrow new IDBError(\"Turning existed index(#{indexName}) to be unique is not allowed.\")\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t#rebuild the index if any changes on schema\n\t\t\t\t\t\t\t\t\t#TAKE YOU\"RE OWN RISK!!\n\t\t\t\t\t\t\t\t\tif (index.keyPath isnt indexSchema.key or\n\t\t\t\t\t\t\t\t\tindex.unique isnt indexSchema.option.unique or\n\t\t\t\t\t\t\t\t\tindex.multiEntry isnt indexSchema.option.multiEntry)\n\t\t\t\t\t\t\t\t\t\tactions.push ->store.deleteIndex(indexName)\n\t\t\t\t\t\t\t\t\t\tactions.push ->store.createIndex(indexName, indexSchema.key, indexSchema.option)\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t#remove unused index\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tactions.push ->store.deleteIndex(indexName)\n\t\t\t\t\t\n\t\t\t\t\t#remove unused stores\n\t\t\t\t\telse\n\t\t\t\t\t\tactions.push ->idb.deleteObjectStore(storeName)\n\t\t\t\n\t\t\n\t\t#create newly added stores\n\t\tfor storeName, storeSchema of _schema.stores when storeName not in currentStoreNames\n\t\t\tstore = idb.createObjectStore(storeName, storeSchema.option)\n\t\t\t\n\t\t\tfor indexName, indexSchema of storeSchema.indexes\n\t\t\t\tdo (store, indexName, indexSchema)->\n\t\t\t\t\tactions.push ->\n\t\t\t\t\t\tstore.createIndex(indexName, indexSchema.key, indexSchema.option)\n\t\t\n\t\t\n\t\t#seems no any error, perform upgrade now\n\t\taction() for action in actions\n\t\t\n","DatabaseManager = do ->\n\t\n\t#cache Database objects\n\tdbs = {}\n\t\n\t#function to return\n\taccessor = (dbName)->\n\t\tdbs[dbName] = new Database(dbName) if not dbs.hasOwnProperty dbName\n\t\tdbs[dbName]\n\t\n\t#also attach IDBError for outer use\n\taccessor.Error = IDBError\n\t\n\taccessor\n","#AMD\nif typeof define is \"function\" and define.amd?\n\tdefine('IDB', DatabaseManager)\n\n#CommonJS\nelse if module?.exports?\n\tmodule.exports = DatabaseManager\n\n#DOM or WebWorker\nelse\n\tif not @.hasOwnProperty 'IDB'\n\t\t@.IDB = DatabaseManager\n\telse if not @.hasOwnProperty '$IDB'\n\t\t@.$IDB = DatabaseManager\n\telse\n\t\tmsg = \"Fail to export IDB: name 'IDB' and '$IDB' is in use.\"\n\t\tif typeof console?.error is \"function\"\n\t\t\tconsole.error msg\n\t\telse\n\t\t\tthrow msg\n"]}