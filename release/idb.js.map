{"version":3,"sources":["env.coffee","DeferAndPromise.coffee","indexedDB.coffee","IDBTransaction.coffee","IDBKeyRange.coffee","IDBRequest2Q.coffee","IDBTx2Q.coffee","IDBError.coffee","Schema.coffee","Query.coffee","Store.coffee","Database.coffee","DatabaseManager.coffee","export.coffee"],"names":[],"mappings":"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","file":"idb.js","sourceRoot":"/source/","sourcesContent":["#abstract root level object as environment(env)\nenv = window or self or global or @","###\nThis code will constructs 3 Promise-related functions:\n\n1. newDefer()\n   this function will return a new deferred object.\n   A defferred object contains 2 functions:\n   i.  resolve(result)\n       return result value through calling this function.\n   ii. reject(error)\n       return any error through calling this function.\n\n2. toPromise(deferred)\n   this function will return the promise object of given deferred object.\n   A promise object contains 2 functions:\n   i.  then(onSuccess, onError = null)\n       set the result handler and, optionally, the error handler of the deferred object.\n   ii. catch(onError)\n       set the error handler of the deferred object.\n\n3. newPromise(result = null, error = null)\n   A shortcut function of using both newDefer() and toPromise().\n   It return a promise object that immediately resolve with given result\n   or reject with given error. Thus, either result or error must be given.\n\n###\n\n\n\n\n#ES6\nif typeof env.Promise isnt \"undefined\"\n\tnewDefer = ()->\n\t\tpromiseObj = {}\n\t\tpromiseObj.promise =\n\t\tnew Promise (promiseResolve, promiseReject)->\n\t\t\tpromiseObj.resolve = promiseResolve\n\t\t\tpromiseObj.reject = promiseReject\n\t\tpromiseObj\n\t\t\t\n\ttoPromise = (deferred)-> deferred.promise\n\t\n\t\n#Q.js\nelse if typeof env.Q isnt \"undefined\"\n\tnewDefer = ()-> Q.defer()\n\ttoPromise = (deferred)-> deferred.promise\n\t\n\t\n#Jquery\nelse if typeof env.jQuery isnt \"undefined\"\n\tnewDefer = ()-> jQuery.Deferred()\n\ttoPromise = (deferred)->\n\t\tdeferred.promise(catch : (fn)-> @fail(fn))\n\t\n\t\nelse\n\tthrow new IDBError \"Not compatible promise function found.\"\n\n\nnewPromise = (result, error)->\n\td = newDefer()\n\tif result\n\t\td.resolve(result)\n\telse if error\n\t\td.reject(error)\n\telse\n\t\tthrow new Error(\"either result or error must provided to newPromise().\")\n\ttoPromise(d)\n","#abstract indexedDB global property\nindexedDB = \nenv.indexedDB or \nenv.mozIndexedDB or \nenv.webkitIndexedDB or\nenv.msIndexedDB\n","#abstract IDBTransaction global property\nIDBTransaction = \nenv.IDBTransaction or \nenv.webkitIDBTransaction or \nenv.msIDBTransaction\n","#abstract IDBKeyRange global property\nIDBKeyRange = \nenv.IDBKeyRange or \nenv.webkitIDBKeyRange or \nenv.msIDBKeyRange\n","#turn IDBRequest to Promise\nIDBRequest2Q = (request)->\n\tdeferred = newDefer()\n\trequest.onsuccess = (event)-> deferred.resolve(event)\n\trequest.onerror = (event)-> deferred.reject(event)\n\ttoPromise deferred\n","#turn IDBTransaction to Promise\nIDBTx2Q = (tx)->\n\td = newDefer()\n\ttx.oncomplete = (event)-> d.resolve(event)\n\ttx.onerror = tx.onabort = (event)-> d.reject(event)\n\ttoPromise d\n","class IDBError extends Error\n\tconstructor: (@message)->\n\t\tconsole.error \"IDBError: #{@message}\"\n\t\n","class Schema\n\t\n\t\n\t#inner class defining object store structure\n\tclass @Store\n\t\t\n\t\t#param (String) name: the store name\n\t\tconstructor: (@name)->\n\t\t\t#store option\n\t\t\t@option =\n\t\t\t\tkeyPath: null        #store's key path\n\t\t\t\tautoIncrement: null  #if store's key is auto increased\n\t\t\t\n\t\t\t#indexes of the store\n\t\t\t@indexes = {}\n\t\t\n\t\t\n\t\taddIndex: (name, key, isUnique, isMultiEntry)->\n\t\t\tif @indexes.hasOwnProperty name\n\t\t\t\tthrow new IDBError \"index(#{name}) duplicated at ObjectStore(#{@name}).\"\n\t\t\telse\n\t\t\t\t@indexes[name] =\n\t\t\t\t\tname: name\n\t\t\t\t\tkey: key\n\t\t\t\t\toption:\n\t\t\t\t\t\tunique: isUnique\n\t\t\t\t\t\tmultiEntry: isMultiEntry\n\t\t\t\treturn\n\t\t\n\t#end of class @Store\n\t\n\t\n\t\n\t\n\t#param (Object) dbDefinition\n\tconstructor: (dbDefinition)->\n\t\t@stores = {}  #hold @Store objects in {<store name> : <@Store object>} pairs\n\t\t\n\t\t@applyDefinition dbDefinition\n\t\n\t\n\t\n\t#param (Object) dbDefinition\n\tapplyDefinition: (dbDefinition)->\n\t\t\n\t\tif typeof dbDefinition isnt \"object\"\n\t\t\tthrow new IDBError \"The database definition must be JSON.\"\n\t\t\n\t\t#scan db definition and fill the schema\n\t\tfor storeName, storeDfn of dbDefinition\n\t\t\t\n\t\t\t#check error\n\t\t\tif typeof storeName isnt \"string\"\n\t\t\t\tthrow new IDBError \"Store name must be string.\"\n\t\t\t\tbreak\n\t\t\t\n\t\t\t#check error\n\t\t\telse if typeof storeDfn isnt \"object\" or storeDfn not instanceof Array\n\t\t\t\tthrow new IDBError \"The definition of store(#{storeName}) must be in array.\"\n\t\t\t\tbreak\n\t\t\t\t\n\t\t\telse\n\t\t\t\t\n\t\t\t\tstore = new @constructor.Store(storeName)\n\t\t\t\t\n\t\t\t\t#scan store's indexes\n\t\t\t\tfor dfn in storeDfn\n\t\t\t\t\t\n\t\t\t\t\t#check error\n\t\t\t\t\tif typeof dfn isnt \"string\"\n\t\t\t\t\t\tthrow new IDBError \"Index definition must be in string form.\"\n\t\t\t\t\t\tbreak\n\t\t\t\t\t\n\t\t\t\t\t#convert index definition into store object\n\t\t\t\t\telse\n\t\t\t\t\t\t\n\t\t\t\t\t\t#remove unnecessary spaces inside the definition\n\t\t\t\t\t\tdfn = dfn\n\t\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t\t.replace /[\\s\\t]+/g   , \" \"\n\t\t\t\t\t\t\t.replace /\\s?\\(\\s?/g  , \"(\"\n\t\t\t\t\t\t\t.replace /\\s?\\)\\s?/g  , \")\"\n\t\t\t\t\t\t\t.replace /\\s?\\.\\s?/g  , \".\"\n\t\t\t\t\t\t\n\t\t\t\t\t\tif dfn.match /^KEY/\n\t\t\t\t\t\t\tif store.option.keyPath?\n\t\t\t\t\t\t\t\tthrow new IDBError(\"Store key duplicated.\")\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif matcher = dfn.match /^KEY(\\(.+\\)).*$/\n\t\t\t\t\t\t\t\tstore.option.keyPath = extract2KeyPath matcher[1]\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif dfn.match /AUTO$/\n\t\t\t\t\t\t\t\tstore.option.autoIncrement = true\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tindexName = dfn.replace(/[\\(\\s].+/, \"\")\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif not indexName.match(/(\\w|\\.)+/)\n\t\t\t\t\t\t\t\tthrow new IDBError \"Invalid index name(#{indexName}).\"\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tisUnique = if dfn.match /[\\s\\)]UNIQUE/g then true else false\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tisMultiEntry = if dfn.match /[\\s\\)]ARRAY/g then true else false\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tkeyPath =\n\t\t\t\t\t\t\t\tif matcher = dfn.match /.+(\\(.+\\)).*/\n\t\t\t\t\t\t\t\t\textract2KeyPath matcher[1]\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tindexName\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tstore.addIndex(indexName, keyPath, isUnique, isMultiEntry)\n\t\t\t\t\n\t\t\t\t#save store to schema\n\t\t\t\t@stores[storeName] = store\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t#extract key path from string\n\t#examples:\n\t#  \"(name, info.email)\" -> [\"name\",\"info.email\"]\n\textract2KeyPath = (string)->\n\t\t\n\t\tif (opening = string.indexOf(\"(\")) > -1\n\t\t\tstring = string[opening + 1...string.lastIndexOf(\")\")]\n\t\t\t\n\t\t\tif itemStrings = string.match /[^,]+/g\n\t\t\t\tarr = ( extract2KeyPath(key.trim()) for key in itemStrings )\n\t\t\t\tif arr.length is 1 then arr[0] else arr\n\t\t\telse\n\t\t\t\tstring\n\t\telse\n\t\t\tstring\n","class Query\n\t\n\t\n\tconstructor: (store, indexName, range)->\n\t\t@_store = store            #the Store object the query belong to\n\t\t@_indexName = indexName    #the name of the index to query\n\t\t@_range = range            #the bound of the query\n\t\t@_limitTo = null           #the position of the end of the limited result set, null for no limit\n\t\t@_limitFrom = 0            #the position of the begining of the limited result set\n\t\t@_order = \"next\"           #the output order of the query result\n\t\n\t\n\t\n\t\n\t#return IDBIndex if indexName given on constructing, else return back the given IDBStore object\n\t#may throw NotFoundError if index not found\n\tgetIDBIndexIfSet: (idbStore)->\n\t\tif @_indexName isnt null\n\t\t\tidbStore.index(@_indexName)\n\t\telse\n\t\t\tidbStore\n\t\t\t\n\t\n\t\n\t\n\t\n\t#setter of query result output order\n\torder: (direction)->\n\t\t@_order =\n\t\t\tif direction is -1 or (typeof direction is \"string\" and direction.match(/desc/i))\n\t\t\t\t\"prev\"\n\t\t\telse\n\t\t\t\t\"next\"\n\t\t@\n\t\n\t\n\t\n\t\n\t#setter of query result limitation\n\t# call @limit(5) to try getting the first 5 results\n\t# call @limit(3, 5) to try getting the 5 results placed after the 2nd one\n\tlimit: (args...)->\n\t\t[ @_limitFrom , @_limitTo ] = switch args.length\n\t\t\twhen 1\n\t\t\t\tlength = args[0]\n\t\t\t\tthrow new IDBError \"length must be > 0 for Query.limit()\" if typeof length isnt \"number\" or length < 1\n\t\t\t\t[ 0 , length - 1 ]\n\t\t\twhen 2\n\t\t\t\tfrom = args[0]\n\t\t\t\tlength = args[1]\n\t\t\t\tthrow new IDBError \"starting position must be > -1 for Query.limit()\" if typeof from isnt \"number\" or from < 0\n\t\t\t\tthrow new IDBError \"length must be > 0 for Query.limit()\" if typeof length isnt \"number\" or length < 1\n\t\t\t\t[ from , from + length - 1 ]\n\t\t\telse\n\t\t\t\tthrow new IDBError \"wrong usage of Query.limit()\"\n\t\t@\n\t\n\t\n\t\n\t\n\t#setter of result handler which iterate the result set\n\teach: (func)->\n\t\t@_store.getIDBObjectStore(\"readonly\")\n\t\t.then (idbStore)=>\n\t\t\td = newDefer()\n\t\t\t\n\t\t\tcursorPosition = 0 #cursor position\n\t\t\t\n\t\t\tresults = [] #store func() returns\n\t\t\t\n\t\t\t@getIDBIndexIfSet(idbStore)\n\t\t\t.openCursor(@_range, @_order)\n\t\t\t.onsuccess = (event)=>\n\t\t\t\t\n\t\t\t\tif cursor = event.target.result\n\t\t\t\t\t\n\t\t\t\t\tif cursorPosition < @_limitFrom\n\t\t\t\t\t\tcursor.advance(cursorPosition = @_limitFrom)\n\t\t\t\t\t\n\t\t\t\t\telse if @_limitTo isnt null and cursorPosition > @_limitTo\n\t\t\t\t\t\td.resolve(results)\n\t\t\t\t\t\n\t\t\t\t\telse\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t\tresult = func(cursor.value, cursor.key)\n\t\t\t\t\t\t\tresults.push result if result isnt undefined\n\t\t\t\t\t\t\tcursorPosition++\n\t\t\t\t\t\t\tcursor.continue()\n\t\t\t\t\t\tcatch err\n\t\t\t\t\t\t\td.reject(err)\n\t\t\t\t\n\t\t\t\telse\n\t\t\t\t\td.resolve(results)\n\t\t\t\n\t\t\ttoPromise d\n\t\n\t\n\t\n\t\n\t#setter of result handler in which only the first reached result will pass in\n\tfirst: (func)->\n\t\t@limit(1)\n\t\t.each (object, key)->\n\t\t\t[object, key]\n\t\t.then (data)->\n\t\t\tif data.length > 0\n\t\t\t\tfunc(data[0][0], data[0][1])\n\t\t\telse\n\t\t\t\tfunc(null, null)\n\t\n\t\n\t\n\t\n\t#setter of result handler in which the whole list of result will pass in\n\tlist: (func)->\n\t\tobjects = []\n\t\tkeys = []\n\t\t@each (object, key)->\n\t\t\tobjects.push object\n\t\t\tkeys.push key\n\t\t.then ->\n\t\t\tfunc(objects, keys)\n\t\n\t\n\t\n\t\n\t#setter of result handler in which the total number of result objects will pass in\n\tcount: (func)->\n\t\t@_store.getIDBObjectStore(\"readonly\")\n\t\t.then (idbStore)=>\n\t\t\tIDBRequest2Q @getIDBIndexIfSet(idbStore).count(@_range)\n\t\t.then (event)->\n\t\t\tfunc(event.target.result)\n\t\n","class Store\n\t\n\t\n\t#param (string) storeName\n\t#param (Database) db, the Database object belong to\n\tconstructor: (storeName, db)->\n\t\t@_name = storeName     #name of the store\n\t\t@_db = db              #the Database object belong to\n\t\n\t\n\t\n\t\n\t#getter of IDBObjectStore object  which this object refer to\n\tgetIDBObjectStore: (mode = \"readwrite\")->\n\t\t@_db.getIDBTransaction(@_name, mode).then (tx)=>\n\t\t\ttx.objectStore(@_name)\n\t\n\t\n\t\n\t\n\t#return the key path of the store\n\tkey: -> @getIDBObjectStore(\"readonly\").then (idbStore)->idbStore.keyPath\n\t\n\t\n\t\n\t\n\t#return the name of the store\n\tname: -> @getIDBObjectStore(\"readonly\").then (idbStore)->idbStore.name\n\t\n\t\n\t\n\t\n\t#return the list of indexes found in the store\n\tindexes: -> @getIDBObjectStore(\"readonly\").then (idbStore)->idbStore.indexNames\n\t\n\t\n\t\n\t\n\t#return boolean indecating if the store key is auto increment\n\tisAutoKey: -> @getIDBObjectStore(\"readonly\").then (idbStore)->idbStore.autoIncrement\n\t\n\t\n\t\n\t\n\t#action to add a new object to store\n\tadd: (arg...)->\n\t\t@getIDBObjectStore().then (idbStore)->\n\t\t\tIDBRequest2Q( idbStore.add(arg...) )\n\t\n\t\n\t\n\t\n\t#action to update existed object from the store\n\tupdate: (arg...)->\n\t\t@getIDBObjectStore().then (idbStore)->\n\t\t\tIDBRequest2Q( idbStore.put(arg...) )\n\t\n\t\n\t\n\t\n\t#action to delete a object from the store\n\tdelete: (key)->\n\t\t@getIDBObjectStore().then (idbStore)->\n\t\t\tIDBRequest2Q( idbStore.delete(key) )\n\t\n\t\n\t\n\t\n\t#action to delete all objects found in the store\n\tclear: ->\n\t\t@getIDBObjectStore().then (idbStore)->\n\t\t\tIDBRequest2Q( idbStore.clear() )\n\t\n\t\n\t\n\t\n\t#return a new Query object that applying given expression\n\twhere: (expression)->\n\t\t\n\t\texpression = expression.trim() if typeof expression is \"string\"\n\t\t\n\t\t[indexName , range] = switch\n\t\t\t\n\t\t\twhen expression is null or expression is \"\"\n\t\t\t\t[null, null]\n\t\t\t\n\t\t\t# x <= index <= y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[2]) , IDBKeyRange.bound( extractStr(matcher[1]), extractStr(matcher[3]) ) ]\n\t\t\t\n\t\t\t# x < index <= y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[2]) , IDBKeyRange.bound( extractStr(matcher[1]), extractStr(matcher[3]), true ) ]\n\t\t\t\n\t\t\t# x <= index < y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[2]) , IDBKeyRange.bound( extractStr(matcher[1]), extractStr(matcher[3]), false, true ) ]\n\t\t\t\n\t\t\t# x < index < y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[2]) , IDBKeyRange.bound( extractStr(matcher[1]), extractStr(matcher[3]), true, true ) ]\n\t\t\t\n\t\t\t# x >= index >= y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[2]) , IDBKeyRange.bound( extractStr(matcher[3]), extractStr(matcher[1]) ) ]\n\t\t\t\n\t\t\t# x > index >= y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[2]) , IDBKeyRange.bound( extractStr(matcher[3]), extractStr(matcher[1]), true ) ]\n\t\t\t\n\t\t\t# x >= index > y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[2]) , IDBKeyRange.bound( extractStr(matcher[3]), extractStr(matcher[1]), false, true ) ]\n\t\t\t\n\t\t\t# x > index > y\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[2]) , IDBKeyRange.bound( extractStr(matcher[3]), extractStr(matcher[1]), true, true ) ]\n\t\t\t\n\t\t\t# index <= x\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[1]) , IDBKeyRange.upperBound extractStr(matcher[2]) ]\n\t\t\t\n\t\t\t# index < x\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*<[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[1]) , IDBKeyRange.upperBound( extractStr(matcher[2]), true ) ]\n\t\t\t\n\t\t\t# index >= x\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>=[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[1]) , IDBKeyRange.lowerBound extractStr(matcher[2]) ]\n\t\t\t\n\t\t\t# index > x\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*>[\\s\\t]*('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[1]) , IDBKeyRange.lowerBound( extractStr(matcher[2]), true ) ]\n\t\t\t\n\t\t\t# index = x\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)[\\s\\t]*=[\\s\\t]*('.*'|\".*\"|\\[.*\\]|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[1]) , IDBKeyRange.only extractStr(matcher[2]) ]\n\t\t\t\n\t\t\t#index\n\t\t\twhen matcher = expression.match /^('.*'|\".*\"|[^\\s\\t]+)$/\n\t\t\t\t[ extractStr(matcher[1]) , null ]\n\t\t\t\n\t\t\telse\n\t\t\t\tthrow new IDBError(\"Unknown statment (#{expression}).\")\n\t\t\n\t\tnew Query(@, indexName, range)\n\t\n\t\n\t\n\t\n\t#a shortcut of calling @where in which no any limitation apply\n\tall: ->\n\t\t@where(null)\n\t\n\t\n\t\n\t\n\t#extract range string\n\t#examples:\n\t#  \"[a,[b,c],4]\" -> [\"a\",[\"b\",\"c\"],4]\n\t#  \"['a,b',[c,'[d,e,f]']\" -> [\"a,b\", [\"c\",\"[d,e,f]\"]\n\t#  \"'a'\" -> \"a\"\n\textractStr = (string)->\n\t\tif string.match /^\\[.*\\]$/\n\t\t\t( extractStr str.trim() for str in string[1...-1].match /(\\[.+\\]|'.*'|\".*\"|[^,]+)/g )\n\t\telse if not isNaN(string)\n\t\t\t+string\n\t\telse\n\t\t\tif string.match /^('.*'|\".*\")$/\n\t\t\t\tstring[1...-1]\n\t\t\telse\n\t\t\t\tstring\n\t\n","class Database\n\t\n\t\n\tconstructor: (dbName)->\n\t\t@_name = dbName                              #the database name\n\t\t@_version = null                             #the database version\n\t\t@_dbDefinition = null                        #the Schema object for this database\n\t\t@_idbDatabase = null                         #the IDBDatabase object this object belong to\n\t\t@_batchTx = null                             #IDBTransaction object that used for batch process\n\t\t@_onVersionConflictHandler = (event)->       #IDBOpenDBRequest.onblocked handler\n\t\t\tthrow event\n\t\n\t\n\t\n\t\n\t#return the database name\n\tname: ()->\n\t\t@getIDBDatabase().then (idb)->idb.name\n\t\n\t\n\t\n\t\n\t#if not parameters given, return the database's version\n\t#if paramters given, define the database with given version\n\tversion: (versionNumber, dbDefination)->\n\t\t\n\t\tif not versionNumber\n\t\t\t@getIDBDatabase().then (idb)->idb.version\n\t\t\n\t\t#define the database only if the version is larger\n\t\telse if @_version is null or @_version <= versionNumber\n\t\t\t@_dbDefinition = dbDefination\n\t\t\t@_version = versionNumber\n\t\t\t\n\t\t\t#close current idb connection if any\n\t\t\tif @_idbDatabase isnt null\n\t\t\t\t@_idbDatabase.close()\n\t\t\t\t@_idbDatabase = \n\t\t\t\t@_batchTx = null\n\t\t\t\n\t\t\t@  #return this for chaining\n\t\n\t\n\t\n\t\n\t#setter of IDBOpenDBRequest.onblocked handler\n\tonVersionConflict: (handler)->\n\t\t@_onVersionConflictHandler = handler\n\t\n\t\n\t\n\t\n\t#getter of IDBDatabase object which this object refer to\n\tgetIDBDatabase: ()->\n\t\tif @_idbDatabase?\n\t\t\tnewPromise @_idbDatabase\n\t\telse\n\t\t\tr = indexedDB.open(@_name, @_version)\n\t\t\tr.onupgradeneeded = (event)=>@doUpgrade(event.target.result, event.target.transaction)\n\t\t\tr.onblocked = (event)=>\n\t\t\t\tif event.newVersion is @_version  #check if required version is defined\n\t\t\t\t\treturn  #simply return\n\t\t\t\telse\n\t\t\t\t\t@_onVersionConflictHandler(event) if typeof @_onVersionConflictHandler is \"function\"\n\t\t\t\t\n\t\t\tIDBRequest2Q( r )\n\t\t\t.then (event)=>\n\t\t\t\t@_idbDatabase = event.target.result\n\t\n\t\n\t\n\t\n\t#getter of IDBTransaction objects of this object\n\t#return _batchTx if set (by calling @batch)\n\t#or return a new IDBTransaction object\n\tgetIDBTransaction: (storeNames, mode)->\n\t\tif @_batchTx\n\t\t\tnewPromise @_batchTx\n\t\telse\n\t\t\t@getIDBDatabase().then (idb)->\n\t\t\t\tidb.transaction(storeNames, mode)\n\t\n\t\n\t\n\t\n\tstore: (storeName)->\n\t\tnew Store(storeName, @)\n\t\n\t\n\t\n\t\n\tclose: ->\n\t\t@_idbDatabase.close()\n\t\t@_idbDatabase = \n\t\t@_batchTx = null\n\t\n\t\n\t\n\t\n\t#remove the database form disk\n\t#this object will no longer usable\n\tremove: ->\n\t\tr = indexedDB.deleteDatabase(@_name)\n\t\tdeferred = newDefer()\n\t\t#ignore onblocked(IDBVersionChangeEvent) because we're deleteing db\n\t\tr.onblocked = deferred.resolve\n\t\tr.onerror = deferred.reject\n\t\tr.onsuccess = deferred.resolve\n\t\t(toPromise deferred)\n\t\t.then =>\n\t\t\t#clear all properties\n\t\t\t@_name = \n\t\t\t@_version = \n\t\t\t@_dbDefinition = \n\t\t\t@_onVersionConflictHandler = \n\t\t\t@_idbDatabase = \n\t\t\t@_batchTx = null\n\t\n\t\n\t\n\t\n\t#create a transaction for upcoming actions\n\t#usage: db.batch(\"store1\", \"store2\", ..., batchFunction)\n\tbatch: (storeNames..., batchFunc)->\n\t\t\n\t\t#first, clear any previous batch transaction\n\t\t@_batchTx = null\n\t\t\n\t\t#get and set a new transaction to _batchTx\n\t\t@getIDBTransaction(storeNames, \"readwrite\").then (tx)=>\n\t\t\t@_batchTx = tx\n\t\t\t\n\t\t\t#run function\n\t\t\ttry\n\t\t\t\tbatchFunc.apply null, (@.store(storeName) for storeName in storeNames)\n\t\t\tfinally\n\t\t\t\t@_batchTx = null #clear tx\n\t\t\t\n\t\t\tIDBTx2Q(tx)\n\t\t\t\t\t\n\t\n\t\n\t\n\t\n\tdoUpgrade: (idb, tx)->\n\t\t\n\t\tif @_dbDefinition is null\n\t\t\tthrow new IDBError \"DB definition not found.\"\n\t\t\n\t\t_schema = new Schema(@_dbDefinition)\n\t\t\n\t\t#list of functions that make change to the db\n\t\tactions = []\n\t\t\n\t\tcurrentStoreNames = idb.objectStoreNames\n\t\t\n\t\t#update/remove indexes of current stores\n\t\tfor storeName in currentStoreNames\n\t\t\tdo (storeName)->\n\t\t\t\tif _schema.stores.hasOwnProperty storeName\n\t\t\t\t\tstore = tx.objectStore(storeName)\n\t\t\t\t\tcurrentIndexNames = store.indexNames\n\t\t\t\t\tstoreSchema = _schema.stores[storeName]\n\t\t\t\t\t\n\t\t\t\t\tfor indexName in currentIndexNames\n\t\t\t\t\t\tdo (indexName)->\n\t\t\t\t\t\t\tif storeSchema.indexes.hasOwnProperty indexName\n\t\t\t\t\t\t\t\tindex = store.index(indexName)\n\t\t\t\t\t\t\t\tindexSchema = storeSchema.indexes[indexName]\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t#adding UNIQUE for existed index is not allow\n\t\t\t\t\t\t\t\tif not index.unique and indexSchema.option.unique\n\t\t\t\t\t\t\t\t\tthrow new IDBError(\"Turning existed index(#{indexName}) to be unique is not allowed.\")\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t#rebuild the index if any changes on schema\n\t\t\t\t\t\t\t\t#TAKE YOU\"RE OWN RISK!!\n\t\t\t\t\t\t\t\tif (index.keyPath isnt indexSchema.key or\n\t\t\t\t\t\t\t\tindex.unique isnt indexSchema.option.unique or\n\t\t\t\t\t\t\t\tindex.multiEntry isnt indexSchema.option.multiEntry)\n\t\t\t\t\t\t\t\t\tactions.push ->store.deleteIndex(indexName)\n\t\t\t\t\t\t\t\t\tactions.push ->store.createIndex(indexName, indexSchema.key, indexSchema.option)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t#remove unused index\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tactions.push ->store.deleteIndex(indexName)\n\t\t\t\t\t\n\t\t\t\t\t#create newly added indexes\n\t\t\t\t\tfor indexName, indexSchema of storeSchema.indexes when indexName not in currentIndexNames\n\t\t\t\t\t\tdo (store, indexName, indexSchema)->\n\t\t\t\t\t\t\tactions.push ->\n\t\t\t\t\t\t\t\tstore.createIndex(indexName, indexSchema.key, indexSchema.option)\n\t\t\t\t\n\t\t\t\t#remove unused stores\n\t\t\t\telse\n\t\t\t\t\tactions.push ->idb.deleteObjectStore(storeName)\n\t\t\n\t\t\n\t\t#create newly added stores\n\t\tfor storeName, storeSchema of _schema.stores when storeName not in currentStoreNames\n\t\t\tstore = idb.createObjectStore(storeName, storeSchema.option)\n\t\t\t\n\t\t\tfor indexName, indexSchema of storeSchema.indexes\n\t\t\t\tdo (store, indexName, indexSchema)->\n\t\t\t\t\tactions.push ->\n\t\t\t\t\t\tstore.createIndex(indexName, indexSchema.key, indexSchema.option)\n\t\t\n\t\t\n\t\t#seems no any error, perform upgrade now\n\t\taction() for action in actions\n\t\n","DatabaseManager = do ->\n\t\n\t#cache Database objects\n\tdbs = {}\n\t\n\t#function to return\n\taccessor = (dbName)->\n\t\tdbs[dbName] = new Database(dbName) if not dbs.hasOwnProperty dbName\n\t\tdbs[dbName]\n\t\n\t#also attach IDBError for outer use\n\taccessor.Error = IDBError\n\t\n\taccessor\n","#AMD\nif typeof define is \"function\" and define.amd?\n\tdefine('IDB', DatabaseManager)\n\n#CommonJS\nelse if module?.exports?\n\tmodule.exports = DatabaseManager\n\n#DOM or WebWorker\nelse\n\tif env.hasOwnProperty 'IDB'\n\t\totherLib = env['IDB']\n\t\tenv.IDB = DatabaseManager\n\t\tenv.IDB.noConflict = -> otherLib\n\telse\n\t\tenv.IDB = DatabaseManager\n"]}